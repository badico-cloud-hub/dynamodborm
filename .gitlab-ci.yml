image: node:8.10

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - test
  - deploy
  - e2e
  - approvals
  - production

before_script:

tests all:
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  stage: test
  script:
    - docker pull node:alpine
    - docker pull dwmkerr/dynamodb
    # - docker network create testnet
    - docker run --name db -d -v /data:/data -p 8000:8000 dwmkerr/dynamodb -dbPath /data -sharedDb
    - docker run --link db:db -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" -v "$PWD":/usr/src/app -w /usr/src/app node:alpine sh -c 'npm install && npm run test'
  environment: test

codequality:
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate 
    - docker run -v /tmp/cc:/tmp/cc -v "$PWD":/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate validate-config
    - ls -lash $PWD
    - echo $PWD
    - docker run --env CODECLIMATE_CODE="$PWD" -v "$PWD":/code -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > gl-code-quality-report.json
  environment: dev
  artifacts:
    paths: [gl-code-quality-report.json]

approval:
  stage: approvals
  script:
    - echo "aprovado deploy para producao"
  allow_failure: false
  environment: prod
  when: manual
